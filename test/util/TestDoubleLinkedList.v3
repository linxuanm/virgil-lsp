def T = UnitTests.registerT("util:list", _, DoubleLinkedListTester.new, _);
def X_ = void(
	T("empty", test_empty),
	T("at", test_at),
	T("delete", test_delete),
	T("put", test_put),
	T("put", test_pop),
	()
);

private class DoubleLinkedListTester(t: Tester) {
	
	private def testValidList<T>(l: DoubleLinkedList<T>) {
		var data = Vector<DLLNode<T>>.new();
		for (curr = l.L.next; curr != l.R; curr = curr.next) data.put(curr);
		if (data.length != l.len) {
			return t.fail2("DLL of length %d has %d elements", l.len, data.length);
		}
		var ptr = l.R.prev;
		for (i = data.length - 1; i >= 0; i--) {
			t.assert_eq(data[i], ptr);
			ptr = ptr.prev;
		}
		t.assert_eq(ptr, l.L);
	}

	def testEq<T>(l: DoubleLinkedList<T>, expected: Array<T>, render: (StringBuilder, T) -> StringBuilder) {
		testValidList(l);
		t.asserta("DLL", expected, l.extract(), render);
	}
}

def test_empty(t: DoubleLinkedListTester) {
	t.testEq<int>(DoubleLinkedList<int>.new(), [], StringBuilder.putd_i32);
	t.testEq<string>(DoubleLinkedList<string>.new(), [], StringBuilder.puts);
	t.testEq<int>(DoubleLinkedLists.from<int>([]), [], StringBuilder.putd_i32);
	t.testEq<string>(DoubleLinkedLists.from<string>([]), [], StringBuilder.puts);

	var xs = DoubleLinkedList<int>.new();
	for (i < 3) xs.putAtEnd(i);
	for (i < 3) xs.popFront();
	t.testEq<int>(xs, [], StringBuilder.putd_i32);
}

def test_at(t: DoubleLinkedListTester) {
	var xs = DoubleLinkedLists.from<int>([1, 2, 3]);
	t.t.assert_eq(xs.at(0), 1);
	t.t.assert_eq(xs.at(1), 2);
	t.t.assert_eq(xs.at(2), 3);
}

def test_delete(t: DoubleLinkedListTester) {
	var xs = DoubleLinkedLists.from<int>([1, 2, 3]);
	xs.delete(1);
	t.testEq<int>(xs, [1, 3], StringBuilder.putd_i32);
	xs.delete(1);
	t.testEq<int>(xs, [1], StringBuilder.putd_i32);
	xs.delete(0);
	t.testEq<int>(xs, [], StringBuilder.putd_i32);

	for (i < 100) xs.put(i, i);
	for (i < 100) { t.t.assert_eq(xs.at(0), i); xs.delete(0); }

	for (i < 100) xs.put(i, i);
	for (i = 99; i >= 0; i--) { t.t.assert_eq(xs.at(i), i); xs.delete(i); }
}

def test_put(t: DoubleLinkedListTester) {
	var xs = DoubleLinkedLists.from<int>([1, 2, 3]);
	xs.put(1, 6);
	xs.put(3, 5);
	xs.put(5, 4);
	t.testEq<int>(xs, [1, 6, 2, 5, 3, 4], StringBuilder.putd_i32);
	xs.put(0, -1);
	xs.put(0, -2);
	t.testEq<int>(xs, [-2, -1, 1, 6, 2, 5, 3, 4], StringBuilder.putd_i32);
	// append to end if index out of bound
	xs.put(50, 10);
	xs.put(69, 2);
	t.testEq<int>(xs, [-2, -1, 1, 6, 2, 5, 3, 4, 10, 2], StringBuilder.putd_i32);

	xs = DoubleLinkedList.new();
	for (i < 5) xs.put(0, i);
	t.testEq<int>(xs, [4, 3, 2, 1, 0], StringBuilder.putd_i32);

	xs = DoubleLinkedList.new();
	for (i < 5) xs.put(i, i);
	t.testEq<int>(xs, [0, 1, 2, 3, 4], StringBuilder.putd_i32);
}

def test_pop(t: DoubleLinkedListTester) {
	var xs = DoubleLinkedLists.from<int>([1, 2]);
	t.t.assert_eq(xs.popFront(), 1);
	t.t.assert_eq(xs.popBack(), 2);
	t.testEq<int>(xs, [], StringBuilder.putd_i32);

	xs = DoubleLinkedLists.from<int>([-9, -8, -7, -6, -5, -4, -3]);
	t.t.assert_eq(xs.popBack(), -3);
	t.t.assert_eq(xs.popBack(), -4);
	t.t.assert_eq(xs.popBack(), -5);
	t.t.assert_eq(xs.popFront(), -9);
	t.t.assert_eq(xs.popFront(), -8);
	t.testEq<int>(xs, [-7, -6], StringBuilder.putd_i32);
}
