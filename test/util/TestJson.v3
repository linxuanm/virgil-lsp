def T = UnitTests.registerT("util:json", _, JsonTester.new, _);
def X_ = void(
	T("render_literals", render_literals),
	T("parse_literals", parse_literals),
	()
);

private class JsonTester(t: Tester) {

	def assert_parse_result(src: string, expected: JsonValue) {
		var p = JsonParser.new(src);
		var res = p.parseValue();
		if (!p.ok) {
			return t.fail(Strings.format2("expected \"%q\", got error \"%s\"", expected.render, p.error_msg));
		}
		if (p.pos < src.length) {
			return t.fail(Strings.format1("src not fully consumed (%d chars left)", src.length - p.pos));
		}
		if (!res.equal(expected)) {
			return t.fail(Strings.format2("expected \"%q\", got \"%q\"", expected.render, res.render));
		}
	}

	def assert_render_result(src: JsonValue, expected: string) {
		var output = StringBuilder.new().putq(src.render).toString();
		if (!Strings.equal(output, expected)) {
			t.fail(Strings.format2("expected \"%s\", got \"%s\"", expected, output));
		}
	}
}

def S = JsonValue.String;
def N = JsonValue.Number;
def B = JsonValue.Bool;
def Null = JsonValue.Null;
def A = JsonValue.JArray;
def O = JsonValue.JObject;
def NO_MAP = HashMap<string, JsonValue>.new(Strings.hash, Strings.equal);

def render_literals(t: JsonTester) {
	var test = t.assert_render_result(_, _);

	test(N(-16), "-16");
	test(N(0), "0");
	test(N(72), "72");
	test(N(65536), "65536");

	test(S(""), "\"\"");
	test(S("abc"), "\"abc\"");
	test(S("abc\n"), "\"abc\\n\"");
	test(S("abc\""), "\"abc\\\"\"");

	test(Null, "null");
	test(B(true), "true");
	test(B(false), "false");
	
	test(A([]), "[]");
	test(A([A([A([A([A([])])])])]), "[[[[[]]]]]");
	test(O(NO_MAP), "{}");
	test(A([O(NO_MAP)]), "[{}]");
}

def parse_literals(t: JsonTester) {
	var test = t.assert_parse_result(_, _);
}
