def T = UnitTests.registerT("util:json:", _, JsonTester.new, _);
def X_ = void(
	T("render_literals", render_literals),
	T("render_objects", render_objects),
	T("parse_literals", parse_literals),
	T("parse_objects", parse_objects),
	T("reader", reader),
	()
);

private class JsonTester(t: Tester) {

	def assert_parse_result(src: string, expected: JsonValue) {
		var p = JsonParser.new(src);
		var res = p.parseValue();
		if (!p.ok) {
			return t.fail(Strings.format2("expected \"%q\", got error \"%s\"", expected.render, p.error_msg));
		}
		if (p.pos < src.length) {
			return t.fail(Strings.format1("src not fully consumed (%d chars left)", src.length - p.pos));
		}
		if (!res.equal(expected)) {
			return t.fail(Strings.format2("expected \"%q\", got \"%q\"", expected.render, res.render));
		}
	}

	def assert_render_result(src: JsonValue, expected: string) {
		var output = StringBuilder.new().putq(src.render).toString();
		if (!Strings.equal(output, expected)) {
			t.fail(Strings.format2("expected \"%s\", got \"%s\"", expected, output));
		}
	}

	def assert_reader_fail(nav: JsonNav, error: string) {
		if (nav.ok) return t.fail("expected reader to fail");
		if (!Strings.equal(nav.err_msg, error)) {
			t.fail(Strings.format2("expected error {%d}, got {%d}", error, nav.err_msg));
		}
	}

	def assert_reader_good(nav: JsonNav) {
		t.assert(nav.ok, "expected reader to succeed");
	}
}

def S = JsonValue.String;
def N = JsonValue.Number;
def B = JsonValue.Bool;
def Null = JsonValue.Null;
def A = JsonValue.JArray;
def O = JsonValue.JObject;
def NO_MAP = Strings.newMap<JsonValue>();

def render_literals(t: JsonTester) {
	var test = t.assert_render_result(_, _);

	test(N(-16), "-16");
	test(N(0), "0");
	test(N(72), "72");
	test(N(65536), "65536");

	test(S(""), "\"\"");
	test(S("abc"), "\"abc\"");
	test(S("abc\n"), "\"abc\\n\"");
	test(S("abc\""), "\"abc\\\"\"");

	test(Null, "null");
	test(B(true), "true");
	test(B(false), "false");
	
	test(A([]), "[]");
	test(A([A([A([A([A([])])])])]), "[[[[[]]]]]");
	test(O(NO_MAP), "{}");
	test(A([O(NO_MAP)]), "[{}]");
}

def render_objects(t: JsonTester) {
	var test = t.assert_render_result(_, _);
	var J = JsonBuilder.new;
	var v: JsonValue;

	test(J().num("abc", 0).build(), "{\"abc\": 0}");
	test(J().num("abc", 0).num("a", 1).build(), "{\"a\": 1, \"abc\": 0}");
	test(J().arr("v", []).build(), "{\"v\": []}");
	test(J().arr("v", Jsons.intArray([1, 2, 3]).v).build(), "{\"v\": [1, 2, 3]}");

	v = JsonBuilder.new().str("g", "x").build();
	test(J().add("f", v).build(), "{\"f\": {\"g\": \"x\"}}");
	test(J().add("f", v).arr("g", []).build(), "{\"f\": {\"g\": \"x\"}, \"g\": []}");
	test(J().add("f", v).arr("g", [v]).build(), "{\"f\": {\"g\": \"x\"}, \"g\": [{\"g\": \"x\"}]}");
}

def parse_literals(t: JsonTester) {
	var test = t.assert_parse_result(_, _);

	test("1", N(1));
	test("0", N(0));
	test("-1", N(-1));

	test("\"\"", S(""));
	test("\"a\"", S("a"));
	test("\"abc\"", S("abc"));
	test("\"abcdefghijklmnopqrstuvwxyz\"", S("abcdefghijklmnopqrstuvwxyz"));

	test("false", B(false));
	test("true", B(true));
	test("null", Null);

	test("[]", A([]));
	test("[[]]", A([A([])]));
	test("{}", O(NO_MAP));
	test("[{}, {}, []]", A([O(NO_MAP), O(NO_MAP), A([])]));
}

def parse_objects(t: JsonTester) {
	var test = t.assert_parse_result(_, _);
	var J = JsonBuilder.new;
	var v: JsonValue;

	test("{\"abc\": 0}", J().num("abc", 0).build());

	test("{\"a\": 1, \"abc\": 0}", J().num("abc", 0).num("a", 1).build());
	test("{\"v\": []}", J().arr("v", []).build());
	test("{\"v\": [1, 2, 3]}", J().arr("v", Jsons.intArray([1, 2, 3]).v).build());

	v = JsonBuilder.new().str("g", "x").build();
	test("{\"f\": {\"g\": \"x\"}}", J().add("f", v).build());
	test("{\"f\": {\"g\": \"x\"}, \"g\": []}", J().add("f", v).arr("g", []).build());
	test("{\"f\": {\"g\": \"x\"}, \"g\": [{\"g\": \"x\"}]}", J().add("f", v).arr("g", [v]).build());

	test("{\"f\": {\"g\": true}}", J().add("f", JsonBuilder.new().boo("g", true).build()).build());
	test("{\"f\": {\"g\": false}}", J().add("f", JsonBuilder.new().boo("g", false).build()).build());
	test("{\"f\": {\"g\": null}}", J().add("f", JsonBuilder.new().nil("g").build()).build());
}

def reader(t: JsonTester) {
	var J = JsonBuilder.new;
	var v: JsonValue.JObject;

	v = J().num("ab", 12).str("cd", "^").add("sub", J().boo("foo", true).build()).build();
	var r = JsonNav.new("packet", null, v);
	t.t.asserti(12, r.readN("ab"));

	t.t.asserti(0, r.readN("void"));
	t.t.assert_string("expected key \"void\" (at \"packet\")", r.err_msg);
	r.clearError();

	t.t.assert_eq(null, r.readS("rua"));
	t.t.assert_string("expected key \"rua\" (at \"packet\")", r.err_msg);
	r.clearError();

	t.t.assert_eq(null, r.readS("ab"));
	t.t.assert_string("expected key \"ab\" to have type string, got number (at \"packet\")", r.err_msg);
	r.clearError();

	var sub = r.readO("sub");
	t.assert_reader_good(r);
	t.t.assert_eq(sub.readB("foo"), true);

	t.t.asserti(0, sub.readN("void"));
	t.t.assert_string("expected key \"void\" (at \"packet.sub\")", sub.err_msg);
	sub.clearError();

	t.t.assert_eq(null, sub.readS("foo"));
	t.t.assert_string("expected key \"foo\" to have type string, got bool (at \"packet.sub\")", sub.err_msg);
	r.clearError();

}
