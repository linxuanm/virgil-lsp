// TODO: maybe log levels?

component Log {
	// Logging for error messages.
	def err = Logger.new("ERROR");

	// options for logging
	def session = true;
	def event = true;
	def rpc = true;
	def packet = true;
}

component LogManager {
	var fd = -1;
	def initLogging(path: string) { fd = System.fileOpen(path, false); }
	def closeLogging() { if (fd >= 0) System.fileClose(fd); }
}

// The max string length of the "[<category>]" tag at the start of each line.
def PREFIX_SIZE = 9;
class Logger(name: string) {
	var indent_size = 0;
	private def write(s: string) {
		if (LogManager.fd < 0) return;
		var b = StringBuilder.new()
			.put1("[%s]", name)
			.pad(' ', PREFIX_SIZE)
			.put2(" %q%s", indentLine(indent_size, _), s)
			.ln();
		System.write(LogManager.fd, b.extract());
	}
	def indent() { indent_size++; }
	def dedent() { indent_size = Ints.max(0, indent_size - 1); }
	def putBlock(name: string, c: Logger -> ()) { puts(name); indent(); c(this); dedent(); }
	def puts(s: string) { write(s); }
	def put1<A>(f: string, a: A) { write(Strings.format1(f, a)); }
	def put2<A, B>(f: string, a: A, b: B) { write(Strings.format2(f, a, b)); }
	def put3<A, B, C>(f: string, a: A, b: B, c: C) { write(Strings.format3(f, a, b, c)); }
}

def indentLine(depth: int, b: StringBuilder) -> StringBuilder {
	for (i < depth) b.puts("  ");
	return b;
}
