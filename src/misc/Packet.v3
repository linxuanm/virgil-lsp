component PacketFormat {
	def HEADER_MAX_LEN = 50;
}

enum HeaderField(head: string) {
	CONTENT_LENGTH("Content-Length"),
	CONTENT_TYPE("Content-Type")
}

class Packet {}

class PacketParser(log: Logger) {

	var pk_length: int;
	var pk_type: string;
	var fd: int;
	var ok: bool;
	var err_msg: string;

	new() { reset(); }

	def reset() {
		pk_length = -1;
		pk_type = "utf-8";
		fd = -1;
		ok = true;
	}

	def parse(file_desc: int) -> string {
		reset();
		fd = file_desc;
		while (readHeader()) {
			if (!ok) return null;
		}

		var payload = Vector<byte>.new();
		for (i < pk_length) {
			payload.put(readC());
			if (!ok) return null;
		}
		var json = payload.extract();

		return json;
	}

	// Reads a header. Returns true if there are more unread headers.
	private def readHeader() -> bool {
		var raw = Streams.readUntil(readC, "\r\n", PacketFormat.HEADER_MAX_LEN);
		log.format2("Reading header[len=%d]: '%s'", raw.length, raw);
		if (raw.length == 0) return false; // End of header section.
		var header = Strings.split(raw, ": ", -1);
		if (header.length != 2) return err(Strings.format1("invalid header '%s'", raw));
		var name = header[0], content = header[1];

		if (Strings.equal(name, HeaderField.CONTENT_TYPE.head)) {
			pk_type = content;
			if (!Strings.equal(pk_type, "utf-8")) return err("'Content-Type' only supports 'utf-8'");
		} else if (Strings.equal(name, HeaderField.CONTENT_LENGTH.head)) {
			var res = Ints.parseDecimal(content, 0);
			if (res.0 < 0) return err("'Content-Length' header requires a number");
			pk_length = res.1;
		} else {
			return err(Strings.format1("invalid header '%s'", name));
		}

		return true;
	}

	private def readC() -> byte {
		var b = System.fileRead(fd);
		if (b < 0) return err("error reading packet bytes");
		return byte.!(b);
	}

	private def err<T>(msg: string) -> T {
		ok = false;
		err_msg = msg;
		var v: T;
		return v;
	}
}
