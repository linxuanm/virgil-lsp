class EventBusSubscriber<I> {
	def log = Logger.new("event");
	def subscribers = Strings.newMap<Vector<I -> ()>>();
	var filter: (string, I) -> bool; // nullable

	def register(event: string, handler: I -> ()) -> this {
		if (Log.event) log.put1("Registering subscriber for event \"%s\".", event);
		var handlers = subscribers[event];
		if (handlers == null) subscribers[event] = handlers = Vector.new();
		handlers.put(handler);
	}
	def fire(event: string, data: I) {
		if (Log.event) log.put1("Firing subscribers for event \"%s\".", event);
		if (!filter(event, data)) {
			if (Log.event) log.put1("Event \"%s\" cancelled by event bus filter.", event);
			return;
		}
		var handlers = subscribers[event];
		if (handlers != null) {
			for (i < handlers.length) handlers[i](data);
			if (Log.event) log.put2("Fired %d subscribers for event \"%s\".", handlers.length, event);
		}
	}
}
