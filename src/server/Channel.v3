type ReadPacketResult {
	case InvalidPacket(err: string);
	case InvalidJsonFormat(err: string);
	case Success(method: string, packet: IncomingData);
}

class Channel(file_desc: int) {
	def log = Logger.new("packet");
	def receiver = PacketReceiver.new(file_desc, log);

	var sent_id = 0;
	
	def read() -> ReadPacketResult {
		var data = receiver.parseJson();
		if (!receiver.ok) return ReadPacketResult.InvalidPacket(receiver.getAndClearError());
		var r = JsonNav.new("packet", null, data);
		var method = r.readS("method");
		var params = r.readO("params");
		if (!r.ok) return ReadPacketResult.InvalidJsonFormat(r.err_msg);
		for (k in IncomingDataKind) {
			if (Strings.equal(method, k.method)) {
				var packet = k.factory();
				if (!packet.deserialize(params)) {
					var msg = Strings.format1("Failed to deserialize packet of method \"%s\"", method);
					return ReadPacketResult.InvalidJsonFormat(msg);
				}
				if (Log.packet) {
					log.put1("Deserialized packet of method \"%s\":", method);
					packet.logContent(log, 1);
				}
				return ReadPacketResult.Success(method, packet);
			}
		}
		if (Log.packet) log.put1("Unsupported method \"%s\", falling through.", method);
		var packet = UnsupportedMethodPacket.new();
		packet.deserialize(params);
		return ReadPacketResult.Success(method, packet);
	}

	def send(payload: ResponseMessage) {
		
	}
}
