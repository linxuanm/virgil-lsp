type ReadPacketResult {
	case RPCError(err: ErrorCodes);
	case Success(method: string, packet: IncomingData);
}

class Channel(file_desc: int) {
	def log = Logger.new("packet");
	def receiver = PacketReceiver.new(file_desc);
	def sender = PacketSender.new(file_desc, log);

	var sent_id = 0;
	
	def read() -> ReadPacketResult {
		var data = receiver.parseJson();
		if (!receiver.ok) return ReadPacketResult.RPCError(ErrorCodes.PARSE_ERROR);
		var r = JsonNav.new("packet", null, data);
		var method = r.readS("method");
		var params = r.readOD("params", null);
		if (!r.ok) return ReadPacketResult.RPCError(ErrorCodes.INVALID_PARAMS);
		for (k in IncomingDataKind) {
			if (Strings.equal(method, k.method)) {
				var packet = k.factory();
				if (!packet.deserialize(params)) {
					var msg = Strings.format1("Failed to deserialize packet of method \"%s\"", method);
					return ReadPacketResult.RPCError(ErrorCodes.INVALID_PARAMS);
				}
				if (Log.packet) log.putBlock(Strings.format1("Read \"%s\" packet:", method), packet.logContent);
				return ReadPacketResult.Success(method, packet);
			}
		}
		if (Log.packet) log.put1("Unsupported method \"%s\", falling through.", method);
		var packet = UnsupportedMethodPacket.new();
		packet.deserialize(params);
		return ReadPacketResult.Success(method, packet);
	}

	def send(payload: ResponseMessage) {
		var b = JsonBuilder.new();
		b.num("id", sent_id++);
		match (payload) {
			Data(v) => {
				if (Log.packet) log.putBlock("Sending result packet:", v.logContent);
				b.add("result", v.serialize());
			}
			Error(e) => {
				if (Log.packet) log.putBlock("Sending error packet:", e.logContent);
				b.add("error", e.serialize());
			}
		}
		sender.sendJson(b.build());
	}

	def sendSimpleError(err: ErrorCodes) {
		send(ResponseMessage.Error(ResponseError.new(err, err.name, null)));
	}
}
