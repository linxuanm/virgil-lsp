type ReadPacketResult {
	case InvalidPacket(err: string);
	case InvalidJsonFormat(err: string);
	case Success(method: string, packet: IncomingData);
}

type ResponsePacket(header: Array<string>, content: string);
class PacketSender(file_desc: int, log: Logger) {
	def sendJson(data: JsonValue) {
		var content = Strings.format1("%q", data.render);
		var header = [Strings.format1("Content-Length: %d", content.length)];
		var packet = ResponsePacket(header, content);
		if (Log.packet) log.putBlock("Sending packet:", logPacket(packet, _));
		sendPacket(packet);
	}
	private def logPacket(p: ResponsePacket, placeholder: Logger) {
		for (header in p.header) log.put2("header[len=%d] '%s'", header.length, header);
		log.put2("content[len=%d] %s", p.content.length, p.content);
	}
	private def sendPacket(p: ResponsePacket) {
		for (header in p.header) System.puts(Strings.format1("%s\r\n", header));
		System.puts("\r\n");
		System.puts(p.content);
	}
}

class Channel(file_desc: int) {
	def log = Logger.new("packet");
	def receiver = PacketReceiver.new(file_desc, log);
	def sender = PacketSender.new(file_desc, log);

	var sent_id = 0;
	
	def read() -> ReadPacketResult {
		var data = receiver.parseJson();
		if (!receiver.ok) return ReadPacketResult.InvalidPacket(receiver.getAndClearError());
		var r = JsonNav.new("packet", null, data);
		var method = r.readS("method");
		var params = r.readO("params");
		if (!r.ok) return ReadPacketResult.InvalidJsonFormat(r.err_msg);
		for (k in IncomingDataKind) {
			if (Strings.equal(method, k.method)) {
				var packet = k.factory();
				if (!packet.deserialize(params)) {
					var msg = Strings.format1("Failed to deserialize packet of method \"%s\"", method);
					return ReadPacketResult.InvalidJsonFormat(msg);
				}
				if (Log.packet) log.putBlock(Strings.format1("Read \"%s\" packet:", method), packet.logContent);
				return ReadPacketResult.Success(method, packet);
			}
		}
		if (Log.packet) log.put1("Unsupported method \"%s\", falling through.", method);
		var packet = UnsupportedMethodPacket.new();
		packet.deserialize(params);
		return ReadPacketResult.Success(method, packet);
	}

	def send(payload: ResponseMessage) {
		var b = JsonBuilder.new();
		b.num("id", sent_id++);
		match (payload) {
			Data(v) => {
				if (Log.packet) log.putBlock("Sending result packet:", v.logContent);
				b.add("result", v.serialize());
			}
			Error(e) => {
				if (Log.packet) log.putBlock("Sending error packet:", e.logContent);
				b.add("error", e.serialize());
			}
		}
		sender.sendJson(b.build());
	}
}
