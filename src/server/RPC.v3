// RPC error codes.
enum ErrorCodes(code: int) {
	// Json RPC error codes.
	PARSE_ERROR(-32700),
	INVALID_REQUEST(-32600),
	METHOD_NOT_FOUND(-32601),
	INVALID_PARAMS(-32602),
	INTERNAL_ERROR(-32603),
	SERVER_NOT_INITIALIZED(-32002),
	UNKNOWN_ERROR_CODE(-32001),

	// VSCode LSP error codes.
	REQUEST_FAILED(-32803),
	SERVER_CANCELLED(-32802),
	CONTENT_MODIFIED(-32801),
	REQUEST_CANCELLED(-32800),
}

type ResponsePacket(header: Array<string>, content: string);
class PacketSender(file_desc: int, log: Logger) {
	def sendJson(data: JsonValue) {
		var content = Strings.format1("%q", data.render);
		var header = [Strings.format1("Content-Length: %d", content.length)];
		var packet = ResponsePacket(header, content);
		if (Log.packet) log.putBlock("Sending packet:", logPacket(packet, _));
		sendPacket(packet);
	}
	private def logPacket(p: ResponsePacket, placeholder: Logger) {
		for (header in p.header) log.put2("header[len=%d] '%s'", header.length, header);
		log.put2("content[len=%d] %s", p.content.length, p.content);
	}
	private def sendPacket(p: ResponsePacket) {
		for (header in p.header) System.puts(Strings.format1("%s\r\n", header));
		System.puts("\r\n");
		System.puts(p.content);
	}
}

enum HeaderField(head: string) {
	CONTENT_LENGTH("Content-Length"),
	CONTENT_TYPE("Content-Type")
}

def HEADER_MAX_LEN = 50;
class PacketReceiver(file_desc: int) extends Throwable<string> {
	def log = Logger.new("rpc");

	var pk_length: int;
	var pk_type: string;
	var fd: int;

	new() { reset(); }

	def reset() {
		pk_length = -1;
		pk_type = "utf-8";
		fd = -1;
		ok = true;
	}

	def parseJson() -> JsonValue.JObject {
		var text = parse();
		if (text == null) return JsonValue.JObject(null);
		var parser = JsonParser.new(text);
		var result = parser.parseValue();
		if (!parser.ok) {
			if (Log.rpc) log.put1("JSON PARSE ERROR: %s", parser.error_msg);
			return err(parser.error_msg);
		}
		var json = JsonValue.JObject.!(result);
		if (Log.rpc) {
			// XXX: add {size()} to {HashMap}
			var entries = MapCollector.new(Strings.asciiLt, json.v).extract();
			log.put1("  json_packet[entries=%d]", entries.length);
		}
		return json;
	}

	def parse() -> string {
		if (Log.rpc) log.puts("Parsing packet:");
		reset();
		fd = file_desc;
		while (readHeader()) {
			if (!ok) return null;
		}

		var payload = Vector<byte>.new();
		for (i < pk_length) {
			payload.put(readC());
			if (!ok) {
				if (Log.rpc) log.put1("PACKET READ ERROR: %s", err_msg);
				return null;
			}
		}
		var text = payload.extract();
		if (Log.rpc) log.put2("  content[len=%d]: %s", text.length, text);

		return text;
	}

	// Reads a header. Returns true if there are more unread headers.
	private def readHeader() -> bool {
		var raw = Streams.readUntil(readC, "\r\n", PacketFormat.HEADER_MAX_LEN);
		if (raw.length == 0) return false; // End of header section.
		if (Log.rpc) log.put2("  header[len=%d]: '%s'", raw.length, raw);
		var header = Strings.split(raw, ": ", -1);
		if (header.length != 2) return err(Strings.format1("invalid header '%s'", raw));
		var name = header[0], content = header[1];

		if (Strings.equal(name, HeaderField.CONTENT_TYPE.head)) {
			pk_type = content;
			if (!Strings.equal(pk_type, "utf-8")) return err("'Content-Type' only supports 'utf-8'");
		} else if (Strings.equal(name, HeaderField.CONTENT_LENGTH.head)) {
			var res = Ints.parseDecimal(content, 0);
			if (res.0 < 0) return err("'Content-Length' header requires a number");
			pk_length = res.1;
		} else {
			return err(Strings.format1("invalid header '%s'", name));
		}

		return true;
	}

	private def readC() -> byte {
		var b = System.fileRead(fd);
		if (b < 0) return err("error reading packet bytes");
		return byte.!(b);
	}
}
