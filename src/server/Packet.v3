class IncomingPacket extends JsonDeserializable { def logContent(log: Logger); }
class OutgoingPacket extends JsonSerializable { def logContent(log: Logger); }

enum IncomingPacketKind(method: string, factory: () -> IncomingPacket) {
	INITIALIZE_PACKET("initialize", InitializePacket.new)
}

// If you want to subscribe to an unsupported/WIP method, use this.
class UnsupportedMethodPacket extends IncomingPacket {
	var data: JsonNav;
	def deserialize(nav: JsonNav) -> bool { data = nav; return true; }
}

class InitializePacket extends IncomingPacket {
	var process_id: int;
	var client_name: string;
	var client_version: string;
	var root_path: string;

	def deserialize(nav: JsonNav) -> bool {
		process_id = nav.readN("processId");
		var client_info = nav.readOD("clientInfo", null);
		if (client_info != null) {
			client_name = client_info.readS("name");
			client_version = client_info.readSD("version", null);
		}
		root_path = nav.readS("rootPath");

		// TODO: handle client capabilities
		return nav.ok;
	}

	def logContent(log: Logger) {
		log.put1("  Parent process ID: %d", process_id);
		if (client_name != null) {
			log.puts("  Client info:");
			log.put1("    Client name: %s", client_name);
			if (client_version != null) log.put1("    Client version: %s", client_version);
		}
	}
}
