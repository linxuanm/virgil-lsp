enum ServerState {
	UNINITIALIZED,
	RUNNING,
	STOPPED
}

// The main class for this language server implementation.
class LSP {

	def log = Logger.new("server");
	def config = ServerConfig.new();
	def comm = Channel.new(0);
	def subscriber = EventBusSubscriber<IncomingData>.new();

	var state = ServerState.UNINITIALIZED;

	def register_packet_subscriber = subscriber.register;

	new() {
		register_packet_subscriber("initialize", initializeFromPacket);
	}

	// Returns whether the initialization was successful.
	def initializeFromPacket(packet: IncomingData) {
		var p = InitializePacket.!(packet);
		config.root_path = p.root_path;
		state = ServerState.RUNNING;
		if (Log.server) log.put1("Server started on workspace %s.", config.root_path);

		var capabilities = ServerCapabilities.new();
		var server_info = ServerInfo.new("Virgil Server :3", "0.1.0");
		comm.send(ResponseMessage.Data(InitializeResult.new(capabilities, server_info)));
	}

	def loop() {
		var packet = comm.read();
		match (packet) {
			InvalidPacket(err) => ;
			InvalidJsonFormat(err) => ;
			Success(method, data) => subscriber.fire(method, data);
		}
	}
}

component LSPManager {
	var server: LSP;

	def createServer() -> LSP {
		if (server != null) {
			Log.err.puts("Unable to start server as an instance is already running.");
			return null;
		}
		server = LSP.new();
		return server;
	}
}

class ServerConfig {
	var root_path: string;
}
