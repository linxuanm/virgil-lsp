enum ServerState {
	UNINITIALIZED,
	RUNNING,
	SHUTDOWN,
	EXIT
}

// The main class for handling LSP lifecycle.
class Server(config: ServerConfig, conn: IOStream<byte>) {

	def log = Logger.new("server");
	def comm = Communication.new(conn);
	def subscriber = EventBusSubscriber<IncomingData>.new();

	var state = ServerState.UNINITIALIZED;
	var exit_code = 0;

	def register_packet_subscriber = subscriber.register;

	new() {
		register_packet_subscriber("initialize", initialize);
		register_packet_subscriber("shutdown", shutdown);
		register_packet_subscriber("exit", exit);
	}

	def initialize(packet: IncomingData) {
		var p = InitializePacket.!(packet);
		config.root_path = p.root_path;
		state = ServerState.RUNNING;
		if (Log.server) log.put1("Server started on workspace %s.", config.root_path);

		var capabilities = ServerCapabilities.new();
		var server_info = ServerInfo.new("Virgil Server :3", "0.1.0");
		comm.send(ResponseMessage.Data(InitializeResult.new(capabilities, server_info)));
	}

	def shutdown(packet: IncomingData) {
		if (Log.server) log.puts("Server received SHUTDOWN.");
		state = ServerState.SHUTDOWN;
		comm.send(ResponseMessage.Data(ShutdownResult.new()));
	}

	def exit(packet: IncomingData) {
		if (Log.server) log.puts("Server received EXIT.");
		if (state != ServerState.SHUTDOWN) {
			Log.err.puts("Server did not receive SHUTDOWN before EXIT.");
			exit_code = 1;
		}
		state = ServerState.EXIT;
	}

	def loop() -> int {
		while (state != ServerState.EXIT) {
			var packet = comm.read();
			match (packet) {
				RPCError(e) => comm.sendSimpleError(e);
				Success(method, data) => {
					if (state == ServerState.UNINITIALIZED && !Strings.equal(method, "initialize")) {
						comm.sendSimpleError(ErrorCodes.SERVER_NOT_INITIALIZED);
						continue;
					}
					if (state == ServerState.SHUTDOWN && !Strings.equal(method, "exit")) {
						comm.sendSimpleError(ErrorCodes.INVALID_REQUEST);
						continue;
					}
					subscriber.fire(method, data);
				}
			}
		}
		log.puts("Exiting server main loop.");
		return exit_code;
	}
}

class ServerConfig {
	var log_path: string;
	var root_path: string;

	def parseOptions(args: Range<string>) {
		for (i < args.length) {
			if (Strings.equal(args[i], "--log") && i + 1 < args.length) {
				log_path = args[i + 1];
				LogManager.initLogging(log_path);
			}
		}
	}
}
