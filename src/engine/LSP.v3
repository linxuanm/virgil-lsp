// The main class for this language server implementation.
class LSP(log: Logger) {

	def config = ServerConfig.new();
	def comm = Channel.new(0);

	def initHandshake() -> bool {
		if (Log.server) log.puts("Reading initialization packet.");
		var initializationPacket = comm.read();
		if (initializationPacket == null) {
			Log.err.puts("Invalid initialization packet. Failed to start server.");
			return false;
		}
		if (!config.loadFromInitializationPacket(initializationPacket)) {
			Log.err.puts("Invalid initialization payload. Failed to start server.");
			return false;
		}
		log.format1("Server started on directory \"%s\".", config.root_path);
		return true;
	}
}

component LSPManager {
	var server: LSP;

	def createServer() -> LSP {
		var log = Logger.new("server");
		if (server != null) {
			// TODO: error
			return null;
		}
		server = LSP.new(log);
		return if(server.initHandshake(), server, null);
	}
}

class ServerConfig {

	var root_path: string;

	def loadFromInitializationPacket(nav: JsonNav) -> bool {
		root_path = nav.readS("rootPath");

		if (!nav.ok) {
			// TODO: unify packet field reading errors
			return false;
		}

		return true;
	}
}
