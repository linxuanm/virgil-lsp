enum HeaderField(head: string) {
	CONTENT_LENGTH("Content-Length"),
	CONTENT_TYPE("Content-Type")
}

class Packet {}

class PacketParser(err: Error) {

	var pk_length: int;
	var pk_type: string;

	var fd: int;

	new() { reset(); }

	def reset() {
		pk_length = -1;
		pk_type = "utf-8";
	}

	def parse(file_desc: int) -> Packet {
		fd = file_desc;

		return null;
	}

	private def read_header() {
		
	}
}

component Transport {

	def read_packet(fd: int) {
		def HEADER_NAME_MAXLEN = HeaderField.CONTENT_LENGTH.head.length;
		var header = Vector<byte>.new();
		for (i < HEADER_NAME_MAXLEN + 1) {
			var peek = System.fileRead(fd);
			if (peek == ':') break;
			header.put(byte.!(peek));
		}

		// skips the space after ':'
		System.fileRead(fd);

		var pk_length = -1;
		var pk_type = "utf-8";
	}
}