// Utility methods for string operations.

component RangeUtil {

	// Finds the first occurrence of {sub} in {src}, starting at {from}.
	def findSubst<T>(src: Range<T>, sub: Range<T>, from: int) -> int {
		var len = sub.length;
		for (i = from; i < src.length - sub.length + 1; i++) {
			if (Ranges.equal(src[i ... (i + len)], sub)) return i;
		}
		return -1;
	}

	// Splits a string by {sep}.
	def split<T>(src: Range<T>, sep: Range<T>) -> Array<Array<T>> {
		var out = Vector<Array<T>>.new();
		var prev = 0;
		var at = findSubst(src, sep, 0);
		while (at != -1) {
			out.put(Ranges.dup(src[prev ... at]));
			prev = at + sep.length;
			at = findSubst(src, sep, prev);
		}
		out.put(Ranges.dup(src[prev ...]));
		return out.extract();
	}

	// {String.endsWith} but more generic.
	def endsWith<T>(src: Range<T>, end: Range<T>) -> bool {
		if (src.length <= end.length) return false;
		for (i < end.length) {
			if (src[src.length - i - 1] != end[end.length - i - 1]) return false;
		}
		return true;
	}
}
