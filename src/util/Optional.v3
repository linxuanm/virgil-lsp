type Optional<T> {
	case None;
	case Some(value: T);

	def map<O>(f: T -> O) -> Optional<O> {
		match (this) {
			None => return Optional.None;
			Some(v) => return Optional.Some(f(v));
		}
	}
}

type Result<A, B> {
	case Fail(value: A);
	case Success(value: B);

	def mapFail<C>(f: A -> C) -> Result<C, B> {
		match (this) {
			Fail(v) => return Result.Fail(f(v));
			Success(v) => return Result.Success(v);
		}
	}

	def mapSuccess<C>(f: B -> C) -> Result<A, C> {
		match (this) {
			Fail(v) => return Result.Fail(v);
			Success(v) => return Result.Success(f(v));
		}
	}
}

class Throwable<E> {
	var ok = true;
	var err_msg: E;
	def err<T>(msg: E) -> T {
		if (ok) {
			ok = false;
			err_msg = msg;
		}
		var ret: T;
		return ret;
	}
	def clearError() {
		ok = true;
		var default: E;
		err_msg = default;
	}
	def getAndClearError() -> E {
		var stored = err_msg;
		clearError();
		return stored;
	}
}
