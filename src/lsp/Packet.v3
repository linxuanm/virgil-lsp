class IncomingData extends JsonDeserializable { def logContent(log: Logger); }
class OutgoingData extends JsonSerializable { def logContent(log: Logger); }

enum IncomingDataKind(method: string, factory: () -> IncomingData) {
	INITIALIZE_PACKET("initialize", InitializePacket.new),
	SHUTDOWN_PACKET("shutdown", EmptyPacket.new),
	EXIT_PACKET("exit", EmptyPacket.new)
}

class ResponseError(
	error: ErrorCodes,
	message: string,
	data: OutgoingData // nullable
) extends OutgoingData {
	def serialize() -> JsonValue {
		var b = JsonBuilder.new().num("code", error.code).str("message", message);
		if (data != null) b.add("data", data.serialize());
		return b.build();
	}
	def logContent(log: Logger) {
		log.put2("Error code: %d (%s)", error.code, error.name);
		log.put1("Message: %s", message);
		if (data != null) log.putBlock("Data:", data.logContent);
	}
}

type ResponseMessage {
	case Data(v: OutgoingData);
	case Error(e: ResponseError);
}

// If you want to subscribe to an unsupported/WIP method, use this.
class UnsupportedMethodPacket extends IncomingData {
	var data: JsonNav;
	def deserialize(nav: JsonNav) -> bool { data = nav; return true; }
	def logContent(log: Logger) { log.puts("<unsupported method packet>"); }
}

// Used for packets without a payload, e.g., shutdown or exit.
class EmptyPacket extends IncomingData {
	def deserialize(nav: JsonNav) -> bool { return true; }
	def logContent(log: Logger) { log.puts("<empty packet>"); }
}

class ClientInfo extends IncomingData {
	var name: string;
	var version: string; // nullable
	def deserialize(nav: JsonNav) -> bool {
		name = nav.readS("name");
		version = nav.readSD("version", null);
		return nav.ok;
	}
	def logContent(log: Logger) {
		log.put1("Name: %s", name);
		if (version != null) log.put1("Version: %s", version);
	}
}
class InitializePacket extends IncomingData {
	var process_id: int;
	var client_info: ClientInfo; // nullable
	var root_path: string;
	def deserialize(nav: JsonNav) -> bool {
		process_id = nav.readN("processId");
		var client_data = nav.readOD("clientInfo", null);
		if (client_data != null) {
			client_info = ClientInfo.new();
			if (!client_info.deserialize(client_data)) return false;
		}
		root_path = nav.readS("rootPath");

		// TODO: handle client capabilities
		return nav.ok;
	}
	def logContent(log: Logger) {
		log.put1("Parent process ID: %d", process_id);
		if (client_info != null) log.putBlock("Client info:", client_info.logContent);
	}
}

class ServerCapabilitiesData(cap: ServerCapabilities) extends OutgoingData {
	def serialize() -> JsonValue {
		var b = JsonBuilder.new();
		b.add(
			"textDocumentSync",
			JsonBuilder.new()
				.boo("openClose", cap.text_document_sync.open_close)
				.num("change", cap.text_document_sync.change.v)
				.build()
		);

		return b.build();
	}
	def logContent(log: Logger) {
		log.puts("Text document sync options:"); log.indent(); {
			log.put1("Open/close notifications: %s", if(cap.text_document_sync.open_close, "true", "false"));
			log.put2("Sync kind: %s(%d)", cap.text_document_sync.change.name, cap.text_document_sync.change.v);
		} log.dedent();
	}
}
class ServerInfo(
	name: string,
	version: string // nullable
) extends OutgoingData {
	def serialize() -> JsonValue {
		var b = JsonBuilder.new().str("name", name);
		if (version != null) b.str("version", version);
		return b.build();
	}
	def logContent(log: Logger) {
		log.put1("Name: %s", name);
		if (version != null) log.put1("Version: %s", version);
	}
}
class InitializeResult(
	capabilities: ServerCapabilitiesData,
	server_info: ServerInfo // nullable
) extends OutgoingData {
	def serialize() -> JsonValue {
		var b = JsonBuilder.new().add("capabilities", capabilities.serialize());
		if (server_info != null) b.add("serverInfo", server_info.serialize());
		return b.build();
	}
	def logContent(log: Logger) {
		log.putBlock("Capabilities:", capabilities.logContent);
		if (server_info != null) log.putBlock("Server info:", server_info.logContent);
	}
}
class ShutdownResult extends OutgoingData {
	def serialize() -> JsonValue { return JsonValue.Null; }
	def logContent(log: Logger) { log.puts("Shutdown"); }
}
