class InitializePacket extends IncomingPacket {
	var root_path: string;
	def loadFrom(v: JsonObject.JObject) -> string {
		
		return (true, null);
	}
}

class IncomingPacket {
	// Loads the packet from a JSON packet data, and returns {null} on success
	// and {err_msg} on failure.
	def loadFrom(v: JsonObject.JObject) -> string;
}

class OutgoingPacket {
	def serialize() -> JsonObject.JObject;
}

def PACKET_CONSTRUCTORS = [
	("initialize", InitializePacket.new)
];

class PacketReader {
	var ok = true;
	var err_msg: string;

	def fromPayload (packet: JsonValue.Object) -> Packet {
		var method = packet.v["method"];
		var params = packet.v["params"];
		if (method == null) return Either.Left("packet missing required field 'method'");
		if (params == null) return Either.Left("packet missing required field 'params'");
		for (entry in PACKET_CONSTRUCTORS) {
			
		}
	}
}
